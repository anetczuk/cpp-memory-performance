#!/bin/bash

##
## This file is automatically generated from "@GENERATOR_FILE@". Changes will be lost.
##

set -eu

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

cd $SCRIPT_DIR

SCRIPT_NAME=$(basename "$0")
SCRIPT_NAME=${SCRIPT_NAME%.*}


argv=$@

run_benchmark=1
maxmem=0
while test $# != 0; do
    case "$1" in
	    --no-benchmark|-nb) run_benchmark=0;;
	    --maxmem|-maxmem) 	maxmem="$2"
	    					shift
	    					;;
	    *)  ;;
    esac
    shift
done


cores_num=$(grep -c ^processor /proc/cpuinfo)

echo "Detected cores: ${cores_num}"


maxmemarg=""
if [ $maxmem -gt 0 ]; then
	maxmem=$((maxmem / cores_num))
	echo "maxmem per process: $maxmem"
	maxmemarg="--maxmem $maxmem"
fi


DATA_DIR="./data"

mkdir -p $DATA_DIR


pids=

# trap ctrl-c and call ctrl_c()
trap ctrl_c INT

function ctrl_c() {
	echo "** Trapped CTRL-C"
	
	## kill all subprocesses
	for pid in ${pids[*]}; do
	    kill $pid || true
	done
}


benchmark_exec=./benchmark_@BENCHMARK_TYPE@
raw_file_prefix=$DATA_DIR/@DATA_TYPE@_data_raw_proc
plot_file_prefix=$DATA_DIR/@DATA_TYPE@_data_plot_proc


if [ $run_benchmark -ne 0 ]; then
	echo "Generating data"
	for i in $(seq 1 $cores_num); do
	   echo "Starting benchmark $i"
	   out_file=${raw_file_prefix}_${i}.txt
	   $benchmark_exec $maxmemarg $argv > $out_file &
	   pids[${i}]=$!
	done  

	## wait for all pids
	for pid in ${pids[*]}; do
	    wait $pid
	done
fi


## processing data
echo "Extracting data"
plot_data_files=""
for i in $(seq 1 $cores_num); do
    in_file=${raw_file_prefix}_${i}.txt
    data_file=${plot_file_prefix}_$i.txt
    awk -F" " '{print $1, $9, $3 $4}' $in_file > $data_file
    if [ -s "$data_file" ]; then
    	plot_data_files=$plot_data_files" "$data_file
    fi
done


plot_png="$DATA_DIR/${SCRIPT_NAME}.png"


if [ -z "$plot_data_files" ]; then
	echo "No data to plot"
else
	echo "Plotting"
	gnuplot -p -e '
				    set title "@PLOT_TITLE@"; 
				    filenames = "'"$plot_data_files"'"; 
				    output_png = "'"$plot_png"'"
				  ' plot_config_multi.gnu
fi
